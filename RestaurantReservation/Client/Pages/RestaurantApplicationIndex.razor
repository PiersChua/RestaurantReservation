@page "/restaurantapplication/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject NavigationManager Navigation
@implements IDisposable
@layout StaffLayout
@inject SweetAlertService Swal

<h2 class="text-center">Approve restaurant application</h2>
<br />
@if (RestaurantApplication != null)
{
    <table class="table table-responsive table-striped" id="bookingsTable">
        <thead>
            <tr>
                <th>Restaurant Name</th>
                <th>Cuisine</th>
                <th>Application Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var RA in RestaurantApplication)
            {
                <tr>
                    <td>@RA?.RestaurantName</td>
                    <td>@RA?.Cuisine</td>
                    <td>@RA?.Status</td>
                    <td>
                        @if (@RA.Status == "Denied")
                        {
                            <button class="bi bi-arrow-counterclockwise btn btn-outline-dark" @onclick="@(()=>UndoDelete(RA.Id))"></button>
                            <button class="bi bi-trash btn btn-outline-danger" @onclick="@(()=>ActualDelete(RA.Id))"></button>

                        }
                        else{
                            <a href="/restaurantApplication/edit/@RA.Id" class="bi bi-pencil btn btn-outline-warning"></a>

                            <a href="/restaurant/create/@RA.Id" class="bi bi-arrow-bar-right btn btn-outline-primary"></a>

                            <button class="bi bi-trash btn btn-outline-danger" @onclick="@(()=>Delete(RA.Id))"></button>
                        }


                    </td>
                    
                </tr>
            }
        </tbody>
    </table>

}
else
{
    <div class="alert alert-info">Loading...</div>
}

@code {
    private List<RestaurantApplication>? RestaurantApplication;
    private List<Restaurant>? Restaurants;

    protected async override Task OnInitializedAsync()
    {
        RestaurantApplication = await _client.GetFromJsonAsync<List<RestaurantApplication>>($"{Endpoints.RestaurantApplicationsEndpoint}");
    }
    async Task UndoDelete(int RestaurantApplicationId)
    {
        var restaurantApplication = RestaurantApplication.First(q => q.Id == RestaurantApplicationId);

        await Swal.FireAsync(
            "Deleted",
            "This Restaurant Application is back!",
            SweetAlertIcon.Success
         );

        restaurantApplication.Status = "Pending";
        await _client.PutAsJsonAsync($"{Endpoints.RestaurantApplicationsEndpoint}/{RestaurantApplicationId}", restaurantApplication);

    }
    async Task Delete(int RestaurantApplicationId)
    {
        var restaurantApplication = RestaurantApplication.First(q => q.Id == RestaurantApplicationId);

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
         {
           Title = "Are you sure?",
           Text = "You will not be able to recover this Restaurant Application!",
           Icon = SweetAlertIcon.Warning,
           ShowCancelButton = true,
           ConfirmButtonText = "Yes, delete it!",
           CancelButtonText = "No, keep it"
         });

        if (!string.IsNullOrEmpty(result.Value))
        {
             await Swal.FireAsync(
               "Deleted",
               "This Restaurant Application has been deleted.",
               SweetAlertIcon.Success
               );

            restaurantApplication.Status = "Denied";
            await _client.PutAsJsonAsync($"{Endpoints.RestaurantApplicationsEndpoint}/{RestaurantApplicationId}", restaurantApplication);

            // await _client.DeleteAsync($"{Endpoints.RestaurantApplicationsEndpoint}/{RestaurantApplicationId}");
            await OnInitializedAsync();

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
         await Swal.FireAsync(
           "Cancelled",
           "Your Restaurant Application is safe :)",
           SweetAlertIcon.Error
           );
        }
    }

        async Task ActualDelete(int RestaurantApplicationId)
    {
        var restaurantApplication = RestaurantApplication.First(q => q.Id == RestaurantApplicationId);

        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
         {
           Title = "Are you sure?",
           Text = "You will not be able to recover this Restaurant Application!",
           Icon = SweetAlertIcon.Warning,
           ShowCancelButton = true,
           ConfirmButtonText = "Yes, delete it!",
           CancelButtonText = "No, keep it"
         });

        if (!string.IsNullOrEmpty(result.Value))
        {
             await Swal.FireAsync(
               "Deleted",
               "This Restaurant Application has been deleted.",
               SweetAlertIcon.Success
               );

            restaurantApplication.Status = "Denied";
            await _client.DeleteAsync($"{Endpoints.RestaurantApplicationsEndpoint}/{RestaurantApplicationId}");

            // await _client.DeleteAsync($"{Endpoints.RestaurantApplicationsEndpoint}/{RestaurantApplicationId}");
            await OnInitializedAsync();

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
         await Swal.FireAsync(
           "Cancelled",
           "Your Restaurant Application is safe :)",
           SweetAlertIcon.Error
           );
        }
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }
}

