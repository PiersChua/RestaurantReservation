@page "/reservation/create/{id:int}"
@inject HttpClient _client
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal
@inject IToastService ToastService
@attribute [Authorize]

<div class="container">
	<div class="text-center">
		<img src="images/appIcon.png">
	</div>
	<div class="col-md-12 form-group">
		<label>Promo Code</label>
		<div class="input-group">
			<input type="text" @bind="code" @oninput="Capitalize" class="form-control" placeholder="Promo code">
			<button @onclick="VerifyCode" class="btn btn-secondary">Redeem</button>
		</div>
	</div>
	<br />
	<EditForm Model="@reservation" OnValidSubmit="CreateReservation">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="row">
			<div class="col-md-6 form-group">
				<label>Reservation Date</label>
				<div>
					<InputDate min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="reservation.Date" class="form-control" />
					<ValidationMessage For="@(() => reservation.Date)" />
				</div>
			</div>
			<div class="col-md-6 form-group">
				<label>Reservation Time</label>
				<div>
					<InputDate Type="InputDateType.Time" min="@reshour?.OpeningTime?.ToString("HH:mm")" max="@reshour?.ClosingTime?.AddMinutes(-45).ToString("HH:mm")" @bind-Value="reservation.Time" class="form-control" />
					<ValidationMessage For="@(() => reservation.Time)" />
				</div>
			</div>
			<div class="col-md-6 form-group">
				<label>No. of guests</label>
				<div class ="input-group">
					<InputNumber min="1" max="30" @bind-Value="@reservation.Guest" class="form-control" />
					<span class ="btn btn-secondary bi bi-people-fill"></span>
				</div>
				<ValidationMessage For="@(() => reservation.Guest)" />
			</div>
			<div class="col-md-6 form-group">
				<label>Special Request</label>
				<div class="input-group">
					<InputText @bind-Value="@reservation.Request" class="form-control" />
					<span class="btn btn-secondary bi bi-card-text"></span>
				</div>
				<ValidationMessage For="@(() => reservation.Request)" />
			</div>
			<hr class="my-4">
			<div class="row">
				<button type="button" @onclick="Back" class="btn btn-warning col-md-2"><span class="oi oi-arrow-left"></span> Back</button>
				<button type="submit" class="btn btn-warning col-md-8 flex-grow-1">Submit Reservation</button>
			</div>
		</div>
		</EditForm>	
</div> 

@code {
	private Restaurant? restaurant;
	private OperatingHour? reshour;
	private List<Restaurant>? Restaurants;
	private List<Promotion>? Promotions;
	private List<PaymentMethod>? PaymentMethods;
	private List<OperatingHour>? OperatingHours;
	private List<OperatingHour>? ResOperatingHours;
	private string? Username;
	[Parameter]
	public int id { get; set; }
	Reservation reservation = new Reservation();
	private string? code;
	protected async override Task OnInitializedAsync()
	{
		Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
		Promotions = await _client.GetFromJsonAsync<List<Promotion>>($"{Endpoints.PromotionsEndpoint}");
		PaymentMethods = await _client.GetFromJsonAsync<List<PaymentMethod>>($"{Endpoints.PaymentMethodsEndpoint}");
		OperatingHours = await _client.GetFromJsonAsync<List<OperatingHour>>($"{Endpoints.OperatingHoursEndpoint}");
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		Username = authState.User.Identity.Name;
		PaymentMethods = PaymentMethods.Where(q => q.Username == Username).ToList();
		if (Restaurants != null && OperatingHours != null)
		{
			restaurant = Restaurants.First(q => q.Id == id);
			ResOperatingHours= OperatingHours.Where(x => x.RestaurantId == id).ToList();
			reshour = OperatingHours.First(x => x.RestaurantId == id && x.Day == reservation.Date.DayOfWeek.ToString());
		}
	}

	async Task CreateReservation()
	{
		var result = await ValidateDate(reservation.Date);
		if(!result)
		{
			return;
		}
		if (reservation.Date == DateTime.Today && reservation.Time < DateTime.Now)
		{
			await Swal.FireAsync(new SweetAlertOptions
				{
					Title = "Oops",
					Text = "Invalid Timing, Please try a later time",
					Icon = "warning",
				});
			return;
		}
		if (PaymentMethods != null && PaymentMethods.Count > 0)
		{
			reservation.RestaurantId = id;
			reservation.ReservationStatusId = 1;
			reservation.Username = Username;
			await _client.PostAsJsonAsync($"{Endpoints.ReservationsEndpoint}", reservation);
			await Swal.FireAsync(new SweetAlertOptions
				{
					Title = "Success",
					Text = "Reservation Created! Please check reservation details under Reservation",
					Icon = "success",
				});
			Navigation.NavigateTo("/");
			ToastService.ShowSuccess($"Your reservation booked at {restaurant.Name} is successful");
		}
		else
		{
			await Swal.FireAsync(new SweetAlertOptions
				{
					Title = "Oops",
					Text = "Please add a payment method first before reserving",
					Icon = "warning",
				});
			Navigation.NavigateTo("/paymentmethods");
		}
	}

	async Task VerifyCode()
	{
		if(Promotions != null)
		{
			var promotion = Promotions.FirstOrDefault(q => q.Code == code);
			if(promotion != null)
			{
				if(promotion.StartDate.Date > DateTime.Today || promotion.EndDate.Date < DateTime.Today)
				{
					await Swal.FireAsync(new SweetAlertOptions
						{
							Title = "Oops",
							Text = "Promotion code is not valid",
							Icon = "error",
						});
					return;
				}
				reservation.PromotionId = promotion.Id;
				await Swal.FireAsync(new SweetAlertOptions
					{
						Title = "Success",
						Text = $"Promotion code applied! Discounted price is {promotion.Discount}%",
						Icon = "success",
					});
			}
			else
			{
				await Swal.FireAsync(new SweetAlertOptions
					{
						Title = "Oops",
						Text = "Promotion code not found",
						Icon = "error",
					});
			}
		}
	}
	private void Back()
	{
		Navigation.NavigateTo($"/restaurant/{id}");
	}
	private void Capitalize(ChangeEventArgs e)
	{
		code = ((string)e.Value)?.ToUpper();
	}
	async Task <bool> ValidateDate(DateTime date)
	{
		if(!ResOperatingHours.Any(x => x.Day == date.DayOfWeek.ToString()))
		{
			await Swal.FireAsync(new SweetAlertOptions
				{
					Title = "Oops",
					Text = $"{restaurant.Name} is closed on {date.DayOfWeek.ToString()}!",
					Icon = "error",
				});
			return false;
		}
		return true;
	}
}
