@page "/reservations"
@inject HttpClient _client
@inject NavigationManager navigation
@inject SweetAlertService Swal
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Upcoming Reservations</h1>
<div class="btn-grp">
    @if (!showCheckboxes)
    {
        <div class="btn-group">
            <button class="btn btn-danger" @onclick="Cancel">Confirm</button>
            <button class="btn btn-secondary" @onclick="toggleCheckBox">Back</button>
        </div>
    }
    else
    {
        <div>
            <button class="btn btn-danger" @onclick="toggleCheckBox"><span class="oi bi bi-calendar-x-fill"></span> Cancel Reservation</button>
        </div>
    }
</div>
<br />
@if (Reservations != null && GetUpcomingReservations()?.Count > 0)
{
    <div class="table-wrapper-scroll-y my-custom-scrollbar">
            <table class="table table-striped">
                <thead>
                    <tr>
                        @if(!showCheckboxes)
                        {
                            <th scope="col"></th>
                        }
                        <th scope="col">Date</th>
                        <th scope="col">Time</th>
                        <th scope="col">Restaurant</th>
                        <th scope="col">Status</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var res in GetUpcomingReservations())
                    {
                        <tr>
                            @if (!showCheckboxes && res.ReservationStatus.Id != 2)
                            {
                                <td class="fs-5"><input type="checkbox" @onchange="e => ToggleSelection(res.Id)" class="custom-control-input" id="customCheck1"></td>
                            }
                            else if (!showCheckboxes && res.ReservationStatus.Id == 2)
                            {
                                <td></td>
                            }
                            <td>@res.Date.Date.ToString("yyyy MMM dd")</td>
                            <td>@res.Time.ToString("h:mm tt").ToUpper()</td>
                            <td>@res.Restaurant?.Name</td>
                            @if(res.ReservationStatus?.Status == "Confirmed")
							{
                                <td class="confirm">@res.ReservationStatus?.Status</td>
								<td><button class="btn btn-secondary" @onclick="(()=>Edit(res.Id))"><span class="bi bi-pencil-square"></span></button></td>
							}
                            else if (res.ReservationStatus?.Status == "Confirmed" && res.Time<DateTime.Now.AddMinutes(30) )
                            {
                                <td class="ongoing">Ongoing</td>
                                <td><button class="btn btn-danger"><span class="bi bi-calendar-check-fill"></span></button></td>
                            }
                            else
							{
                                <td class="cancel">@res.ReservationStatus?.Status</td>
                                <td><button class="btn btn-danger"><span class="bi bi-x-square-fill"></span></button></td>
							}
                            
                        </tr>
                    }
                </tbody>
            </table>
        </div>
}
else
{
    <div class="upcoming-group">
        <h3>You currently have no upcoming reservations, click <a href="restaurants">here</a> to make one now!</h3>
    </div>
}
<br />
<br />
<h1>Past Reservations</h1>
@if (Reservations != null && GetPastReservations()?.Count > 0)
{
    <div class="table-wrapper-scroll-y my-custom-scrollbar">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Date</th>
                        <th scope="col">Time</th>
                        <th scope="col">Restaurant</th>
                        <th scope="col">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var res in GetPastReservations())
                    {
                        <tr>
                            <td>@res.Date.Date.ToString("yyyy MMM dd")</td>
                            <td>@res.Time.ToString("h:mm tt").ToUpper()</td>
                            <td>@res.Restaurant?.Name</td>
                            @if (res.ReservationStatus?.Status == "Confirmed")
                            {
                                <td class="confirm">@res.ReservationStatus?.Status</td>
                  
                            }
                            else
                            {
                                <td class="cancel">@res.ReservationStatus?.Status</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
}
else
{
    <div class="upcoming-group">
        <h3>Track your past reservations here</h3>
    </div>
}

@code {
    private List<Reservation>? Reservations;
    private bool showCheckboxes = true;
    List<int> selectedIds = new List<int>();
    Reservation reservation = new Reservation();
    private string? Username;
    protected override async Task OnInitializedAsync()
    {
        Reservations = await _client.GetFromJsonAsync<List<Reservation>>($"{Endpoints.ReservationsEndpoint}");
        Reservations = Reservations.OrderBy(x => x.Date).ToList();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Username = authState.User.Identity.Name;
        if(Reservations != null)
        {
            Reservations = Reservations.Where(r => r.Username == Username).ToList();
        }

    }

    private List<Reservation>? GetUpcomingReservations()
    {
        if (Reservations != null)
        {
            return Reservations.Where(q => q.Date.Date >= DateTime.Now).ToList();
        }
        else
        {
            return null;
        }
    }

    private List<Reservation>? GetPastReservations()
    {
        if (Reservations != null)
        {
            return Reservations.Where(q => q.Date.Date < DateTime.Now).ToList();
        }
        else
        {
            return null;
        }
    }

    private void Edit(int id)
    {
        navigation.NavigateTo($"/reservations/edit/{id}");
    }
    private void toggleCheckBox()
    {
        showCheckboxes = !showCheckboxes;
    }
    async Task Cancel()
    {
        if (selectedIds.Count == 0)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Oops",
                    Text = "Please select at least one reservation to cancel",
                    Icon = "error",
                });
            return;
        }
        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You won't be able to revert this!",
                Icon = "warning",
                ConfirmButtonColor = "#3085d6",
                CancelButtonColor = "#d33",
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, cancel it!",
                CancelButtonText = "No, keep it"
            });
        if (!string.IsNullOrEmpty(result.Value))
        {
            foreach (var resId in selectedIds)
            {
                reservation = await _client.GetFromJsonAsync<Reservation>($"{Endpoints.ReservationsEndpoint}/{resId}");
                reservation.ReservationStatusId = 2;
                await _client.PutAsJsonAsync($"{Endpoints.ReservationsEndpoint}/{resId}", reservation);
            }
            await Swal.FireAsync(
              "Success",
              "Reservation cancelled",
              "success"
              );
            toggleCheckBox();
            await OnInitializedAsync();
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
              "Cancelled",
              "Your request has been cancelled",
              "error"
              );
            toggleCheckBox();
            selectedIds.Clear();
        }
        
    }
    private void ToggleSelection(int id)
    {
        if (selectedIds.Contains(id))
        {
            selectedIds.Remove(id);
        }
        else
        {
            selectedIds.Add(id);
        }
    }


}
