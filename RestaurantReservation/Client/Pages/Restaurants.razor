@page "/restaurants/{searchTerm}"
@page "/restaurants"
@inject HttpClient _client
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @attribute [Authorize(Roles = "Staff")] *@

<div class="restaurant-search">
	<AuthorizeView>
		<Authorized>
			<h2> Welcome @context.User.Identity.Name! Where would you like to dine in today?</h2>
		</Authorized>
		<NotAuthorized>
			<h2> Welcome Guest! Where would you like to dine in today?</h2>
		</NotAuthorized>
	</AuthorizeView>
	<div class="filter-search">
		<h4><span class="oi bi bi-funnel"></span> Filter</h4>
		<select @bind="cuisine">
			<option value="" disabled selected hidden>--Cuisine--</option>
			@foreach (var item in cuisineSelections)
			{
				<option value="@item">@item</option>
			}
		</select>
		<select @bind="location">
			<option value="" disabled selected hidden>--Location--</option>
			@foreach (var item in locationSelections)
			{
				<option value="@item">@item</option>
			}
		</select>
		<select @bind="category">
			<option value="" disabled selected hidden>--Category--</option>
			@foreach (var item in priceSelections)
			{
				<option value="@item">@item</option>
			}
		</select>
		<div class="input-group">
			<button type="submit" class="btn btn-primary" @onclick="ApplyFilter" >Apply</button>
			<button type="submit" class="btn btn-secondary" @onclick="ResetFilter">Clear</button>
		</div>
	</div>
</div>
@if (Res != null)
{
	<div>
		@if(filteredRestaurant!=null && filteredRestaurant.Count>0)
		{
			foreach(var res in filteredRestaurant)
			{
				<div @onclick="(() => Reserve(res.Id))" class="res-link">
					<p>@res.Name</p>
				</div>
			}
		}
		else
		{
			<h1>No restaurants found</h1>
		}
	</div>
}
else
{
	<h1>Loading Restaurants.</h1>
}


@code {

	[Parameter]
	public string? searchTerm { get; set; }
	private string? cuisine;
	private List<string> cuisineSelections = new List<string> { "Chinese", "Korea", "Eurasian","Indian" };

	private string? location;
	private List<string> locationSelections = new List<string> { "North", "South", "East","West","NorthEast","NorthWest","SouthEast","SouthWest", "Central"};

	private string? category;
	private List<string> priceSelections = new List<string> {"Hotpot","BBQ","High Tea"};

	private List<Restaurant>? Res;
	private List<Restaurant>? filteredRestaurant;
	private void ApplyFilter()
	{
		filteredRestaurant=Res.Where(r =>
		(string.IsNullOrEmpty(searchTerm) || r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
			r.Cuisine.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
			r.Location.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
			r.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
		(string.IsNullOrEmpty(cuisine) || r.Cuisine == cuisine) &&
		(string.IsNullOrEmpty(location) || r.Location == location) &&
		(string.IsNullOrEmpty(category) || r.Category == category))
		.ToList();
	}
	private void ResetFilter()
	{
		filteredRestaurant = Res;
		cuisine = "";
		location = "";
		category = "";
	}

	private void Reserve(int resid)
	{
		Navigation.NavigateTo($"/restaurant/{resid}");
	}

	protected override async Task OnParametersSetAsync()
	{
		Res = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
		ApplyFilter();
	}
	// protected override async Task OnInitializedAsync()
	// {
	// 	var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
	// 	var user = authState.User;
	// 	var role = user.FindFirst(ClaimTypes.Role)?.Value;
	// }
}
