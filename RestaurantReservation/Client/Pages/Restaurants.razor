@page "/restaurants"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@* @attribute [Authorize(Roles = "Customer")] *@

<div class="restaurant-search">
	<AuthorizeView>
		<Authorized>
			<h2> Welcome @context.User.Identity.Name! Where would you like to dine in today?</h2>
		</Authorized>
		<NotAuthorized>
			<h2> Welcome Guest! Where would you like to dine in today?</h2>
		</NotAuthorized>
	</AuthorizeView>
	<div class="filter-search">
		<h4> Filter <span class="oi bi bi-funnel"></span></h4>
		<select @bind="cuisine">
			<option value="" disabled selected hidden>--Cuisine--</option>
			@foreach (var item in cuisineSelections)
			{
				<option value="@item">@item</option>
			}
		</select>
		<select @bind="location">
			<option value="" disabled selected hidden>--Location--</option>
			@foreach (var item in locationSelections)
			{
				<option value="@item">@item</option>
			}
		</select>
		<select @bind="category">
			<option value="" disabled selected hidden>--Category--</option>
			@foreach (var item in priceSelections)
			{
				<option value="@item">@item</option>
			}
		</select>
		<button type="submit" class="btn btn-primary" @onclick="ApplyFilter" >Apply</button>
	</div>
</div>
@if (Res != null)
{
	<table class="table table-responsive">
		<thead>
			<tr>
				@* <th>Image</th> *@
				<th>Name</th>
				<th>Cusine</th>
				<th>Category</th>
			</tr>
		</thead>
		<tbody>
			@if (filteredRestaurant != null)
			{
				@foreach (var res in filteredRestaurant)
				{
					<tr>
						<td>
							@res.Name
						</td>
						<td>
							@res.Cuisine
						</td>
						<td>
							@res.Category
						</td>
					</tr>
				}
			}
			else
			{
				<h1>Restuarant Not Found</h1>
			}
		</tbody>
	</table>
}
else
{
	<h1>Loading Restaurants.</h1>
}


@code {
	private string? cuisine;
	private List<string> cuisineSelections = new List<string> { "Chinese", "Malay", "Eurasian","Indian" };

	private string? location;
	private List<string> locationSelections = new List<string> { "North", "South", "East","West","NorthEast","NorthWest","SouthEast","SouthWest", "Central"};

	private string? category;
	private List<string> priceSelections = new List<string> {"Hotpot","Buffet","High Tea"};

	private List<Restaurant>? Res;
	private List<Restaurant>? filteredRestaurant;
	private void ApplyFilter()
	{
		filteredRestaurant=Res.Where(r =>
		(string.IsNullOrEmpty(cuisine) || r.Cuisine == cuisine) &&
		(string.IsNullOrEmpty(location) || r.Location == location) &&
		(string.IsNullOrEmpty(category) || r.Category == category))
		.ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		Res = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
		filteredRestaurant = Res;
		// // Get the current URL
		// var uri = new Uri(Navigation.Uri);

		// // Parse the query parameters
		// var query = uri.Query;
		// var queryString = System.Web.HttpUtility.ParseQueryString(query);

		// // Get the value of the "data" parameter
		// string serializedObject = queryString["search"];

		// // Deserialize the object if the value is not null or empty
		// if (!string.IsNullOrEmpty(serializedObject))
		// {
		// 	var searchTerm = System.Text.Json.JsonSerializer.Deserialize<String>(serializedObject);
		// 	filteredRestaurant = Res.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
		// }
		// else
		// {
		// 	filteredRestaurant = Res;
		// }

	}
	
}
