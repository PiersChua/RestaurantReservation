@page "/reviews/edit/{id:int}"
@inject HttpClient _client
@inject SweetAlertService Swal
@inject NavigationManager _navManager

<div class="container">
	<EditForm Model="@review" OnValidSubmit="UpdateReview">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-group">
			<div class="rating">
				@foreach (var rate in RatingDetails)
				{
					<div>
						<span @onclick="() => SetRating(rate.Value)" class="bi bi-star-fill @(review.Rating >= rate.Value ? "yellow" : "")"></span>
						<label>@rate.Description</label>
					</div>
				}
				<ValidationMessage For="@(() => review.Rating)" />
			</div>
		</div>
		<br />
		<div class="form-group">
			<label>Description</label>
			<div>
				<InputTextArea @bind-Value="review.Description" class="form-control" rows="4" />
				<ValidationMessage For="@(() => review.Description)" />
			</div>
		</div>

		<hr class="my-4" />
		<button type="submit" class="btn btn-warning btn-block w-100">Update Review</button>

	</EditForm>
</div>

@code {
	[Parameter]
	public int id { get; set; }

	Review? review = new Review();
	List<(int Value, string Description)> RatingDetails = new List<(int, string)>
	{
		(1, "Very Dissatisfied"),
		(2, "Dissatisfied"),
		(3, "Average"),
		(4, "Satisfied"),
		(5, "Very Satisfied")
	};

	protected override async Task OnParametersSetAsync()
	{
		review = await _client.GetFromJsonAsync<Review>($"{Endpoints.ReviewsEndpoint}/{id}");
	}

	async Task UpdateReview()
	{
		await _client.PutAsJsonAsync($"{Endpoints.ReviewsEndpoint}/{id}", review);
		await Swal.FireAsync(new SweetAlertOptions
			{
				Title = "Updated",
				Text = "Review updated",
				Icon = "info",
			});
		_navManager.NavigateTo($"/reviews/{review.RestaurantId}");
	}
	private void SetRating(int rating)
	{
		review.Rating = rating;
	}
}
