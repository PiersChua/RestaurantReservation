@page "/paymentmethods"
@inject HttpClient _client
@inject NavigationManager navigation
@inject IJSRuntime _js

<div class="container">
    @if(PayMethods != null && PayMethods.Count>0)
	{
		<div class="row">
			@foreach (var pay in PayMethods)
			{
				<div class="card mb-2 shadow-sm">
					<div class="card-body d-flex">
                        <img src="images/mastercardLogo.png" /> 
                        <div class="card-details">
                            <p class="card-text">Name: @UpperCase(pay.Name)</p>
                            <p>Card Number: @MaskCardNumber(pay.CardNumber)</p>
                        </div>
                        <div class="card-buttons">
                            <button class="btn btn-secondary" @onclick="() => Edit(pay.Id)"><span class="bi bi-pencil-square"></span></button>
							<button class="btn btn-danger" @onclick="() => DeletePaymentMethod(pay.Id)"><span class="bi bi-trash3-fill"></span></button>
                        </div>
                            
					</div>
				</div>
			}
		</div>
	}
	else
	{
		<h1>You currently have no payment Method</h1>
	}
  <main>
    <div class="py-5 text-center">
      <img src="/images/appIcon.png" width="200" height="200">
      <h2>App Wallet</h2>
      <p class="lead">Add your personal payment method by filling up your card details in the form below</p>
    </div>

    <div class="row g-5">
      <div class="col-md-7 col-lg-12">
          <h4 class="mb-3">Payment</h4>
            <div class="my-3">
                <div class="form-check">
                    <input id="credit" name="paymentMethod" type="radio" class="form-check-input" checked required>
                    <label class="form-check-label" for="credit">Credit card</label>
                </div>
                <div class="form-check">
                    <input id="debit" name="paymentMethod" type="radio" class="form-check-input" required>
                    <label class="form-check-label" for="debit">Debit card</label>
                </div>
                <div class="form-check">
                    <input id="paypal" name="paymentMethod" type="radio" class="form-check-input" required>
                    <label class="form-check-label" for="paypal">PayPal</label>
                </div>
            </div>
        <EditForm Model=@paymentMethod OnValidSubmit="CreatePaymentMethod">
            <DataAnnotationsValidator />
                <div class="row gy-3">
                    <div class="col-md-6">
                        <label for="cc-name" class="form-label">Name on card</label>
                        <div class="input-group">
                            <InputText @bind-Value="paymentMethod.Name" class="form-control" />
                            <span class="btn btn-secondary bi bi-person-fill"></span>
                        </div>
                        <small class="text-body-secondary">Full name as displayed on card</small>
                        <ValidationMessage For="@(() => paymentMethod.Name)" />
                    </div>

                    <div class="col-md-6">
                        <label for="cc-number" class="form-label">Card number</label>
                       
                        <div class="input-group">
                            <InputText @bind-Value="paymentMethod.CardNumber" class="form-control" />
                            <span class="btn btn-secondary bi bi-credit-card"></span>
                        </div>
                        
                        <small class="text-body-secondary">Ensure there's no spacing between the numbers</small>
                        <ValidationMessage For="@(() => paymentMethod.CardNumber)" />
                    </div>

                    <div class="col-md-3">
                        <label for="cc-expiration" class="form-label">Expiration</label>
                        <InputDate min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="paymentMethod.DateOfExpiry" class="form-control" />
                        <ValidationMessage For="@(() => paymentMethod.DateOfExpiry)" />
                    </div>

                    <div class="col-md-3">
                        <label for="cc-cvv" class="form-label">CVV</label>
                        <InputNumber @bind-Value="paymentMethod.CVV" class="form-control" />
                        <ValidationMessage For="@(() => paymentMethod.CVV)" />
                    </div>
                </div>
                <hr class="my-4">
                <button class="w-100 btn btn-primary btn-lg" type="submit">Add Payment!</button>
          </EditForm>
      </div>
    </div>
  </main>

  <footer class="my-5 pt-5 text-body-secondary text-center text-small">
    <p class="mb-1">&copy; 2023–2024 BookBite</p>
    <ul class="list-inline">
      <li class="list-inline-item"><a href="#">Privacy</a></li>
      <li class="list-inline-item"><a href="#">Terms</a></li>
      <li class="list-inline-item"><a href="#">Support</a></li>
    </ul>
  </footer>
</div>


    


@code{
    private List<PaymentMethod>? PayMethods;
    PaymentMethod paymentMethod = new PaymentMethod();

    async Task CreatePaymentMethod()
    {
        await _client.PostAsJsonAsync($"{Endpoints.PaymentMethodsEndpoint}", paymentMethod);
        await _js.InvokeVoidAsync("alert", "Payment Method added!");
        await OnInitializedAsync();
        navigation.NavigateTo("/paymentmethods");
    }


    async Task DeletePaymentMethod(int payMethodid)
    {
        if (PayMethods != null)
        {
            var paymethod = PayMethods.First(q => q.Id == payMethodid);
            var confirm = await _js.InvokeAsync<bool>("confirm", $"Do you want to delete {paymethod.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.PaymentMethodsEndpoint}/{payMethodid}");
                await OnInitializedAsync();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        PayMethods = await _client.GetFromJsonAsync<List<PaymentMethod>>($"{Endpoints.PaymentMethodsEndpoint}");
    }
    private string MaskCardNumber(string CardNumber)
    {
        if (CardNumber.Length >= 12)
        {
            string maskedDigits = new string('*', CardNumber.Length - 4); // Mask all digits except the last 4
            return maskedDigits + CardNumber.Substring(CardNumber.Length - 4);
        }
        else
        {
            return null;
        }
    }
    private string UpperCase(string name)
    {
        return name.ToUpper();
    }
    private void Edit(int id)
    {
        navigation.NavigateTo($"/paymentmethods/edit/{id}");
    }
}