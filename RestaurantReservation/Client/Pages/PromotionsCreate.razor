@page "/promotions/create"
@inject HttpClient _client
@inject NavigationManager navigation
@inject IJSRuntime js
<div class="container">
    <div class="py-5 text-center">
        <img src="/images/promoIcon.png" width="300" height="200">
    </div>
    <EditForm Model="@promo" OnValidSubmit="CreatePromotion">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <div class="row">
            <div class="col-md-6 form-group">
                <label>Name</label>
                <div>
                    <InputText @bind-Value="promo.Name" class="form-control" />
                    <ValidationMessage For="@(() => promo.Name)" />
                </div>
            </div>
            <div class="col-md-6 form-group">
                <label>Promo code</label>
                <div>
                    <InputText @bind-Value="promo.Code" class="form-control" @oninput="Capitalize"/>
                    <ValidationMessage For="@(() => promo.Code)" />
                </div>
            </div>
            <div class="col-md-6 form-group">
                <label>Description</label>
                <div>
                    <InputText @bind-Value="promo.Description" class="form-control" />
                    <ValidationMessage For="@(() => promo.Description)" />
                </div>
            </div>
            <div class="col-md-6 form-group">
                <label>Discount</label>
                <div>
                    <InputSelect @bind-Value="promo.Discount" class="form-control">
                        <option value="" disabled selected hidden></option>
                            @foreach (var dis in discount)
                            {
                                <option value="@dis">@dis%</option>
                            }
                    </InputSelect>
                    <ValidationMessage For="@(() => promo.Discount)" />
                </div>
            </div>
            <div class="col-md-6 form-group">
                <label>Promotion Start Date</label>
                <div>
                    <InputDate min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="promo.StartDate" class="form-control" />
                    <ValidationMessage For="@(() => promo.StartDate)" />
                </div>
            </div>
            <div class="col-md-6 form-group">
                <label>Promotion End Date</label>
                <div>
                    <InputDate min="@promo.StartDate.AddDays(1).ToString("yyyy-MM-dd")" @bind-Value="promo.EndDate" class="form-control" />
                    <ValidationMessage For="@(() => promo.EndDate)" />
                </div>
            </div>
            <div class="col-md-12 form-group">
                <label>Promotion Image</label>
                <div>
                    <InputText @bind-Value="promo.ImagePath" class="form-control" />
                    <ValidationMessage For="@(() => promo.ImagePath)" />
                </div>
                <small>Image path should be an absolute link</small>
            </div>
            <hr class="my-4">
            <button type="submit" class="w-100 btn btn-primary btn-lg">Create Promotion</button>
        </div>
    </EditForm>
</div>
<hr class="my-4">
@if (Promotions != null && GetUpcomingPromotions()?.Count > 0)
{
    <h1>Upcoming Promotions</h1>
    <div class="btn-grp">
        @if (!showCheckboxes)
        {
            <div class="btn-group">
                <button class="btn btn-danger" @onclick="Delete">Confirm</button>
                <button class="btn btn-secondary" @onclick="toggleCheckBox">Back</button>
            </div>
        }
        else
        {
            <div>
                <button class="btn btn-danger" @onclick="toggleCheckBox"><span class="oi bi bi-trash3-fill"></span> Remove Promotion</button>
            </div>
        }
    </div>
    <div class="bd-example-snippet bd-code-snippet">
        <div class="bd-example m-0 border-0">
            <table class="table table-striped">
                <thead>
                    <tr>
                        @if (!showCheckboxes)
                        {
                            <th scope="col"></th>
                        }
                        <th scope="col">Name</th>
                        <th scope="col">Start Date</th>
                        <th scope="col">End Date</th>
                        <th scope="col">Discount</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var promo in GetUpcomingPromotions())
                    {
                        <tr>
                            @if (!showCheckboxes)
                            {
                                <td class="fs-5"><input type="checkbox" @onchange="e => ToggleSelection(promo.Id)" class="custom-control-input" id="customCheck1"></td>
                            }
                            <td>@promo.Name</td>
                            <td>@promo.StartDate.Date.ToString("yyyy MMM dd")</td>
                            <td>@promo.EndDate.Date.ToString("yyyy MMM dd")</td>
                            <td>@promo.Discount%</td>
                            <td><button class="btn btn-secondary" @onclick="(()=>Edit(promo.Id))"><span class="bi bi-pencil-square"></span></button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@if (Promotions != null && GetPastPromotions()?.Count > 0)
{
    <h1>Upcoming Promotions</h1>
    <div class="bd-example-snippet bd-code-snippet">
        <div class="bd-example m-0 border-0">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Start Date</th>
                        <th scope="col">End Date</th>
                        <th scope="col">Discount</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var promo in GetPastPromotions())
                    {
                        <tr class="table table-striped">
                            <td>@promo.Name</td>
                            <td>@promo.StartDate.Date.ToString("yyyy MMM dd")</td>
                            <td>@promo.EndDate.Date.ToString("yyyy MMM dd")</td>
                            <td>@promo.Discount%</td>
                            <td><button class="btn btn-secondary" @onclick="(()=>Edit(promo.Id))"><span class="bi bi-pencil-square"></span></button></td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
@code {
    private List<Promotion>? Promotions;
    private bool showCheckboxes = true;
    List<int> selectedIds = new List<int>();
    Promotion promo = new Promotion();
    List<Double> discount = new List<Double>
    {
        10.0,
        20.0,
        30.0,
        40.0,
        50.0,
        60.0,
        70.0,
        80.0,
        90.0,
        100.0
    };

    protected override async Task OnInitializedAsync()
    {
        Promotions = await _client.GetFromJsonAsync<List<Promotion>>($"{Endpoints.PromotionsEndpoint}");
    }
    async Task CreatePromotion()
    {
        await _client.PostAsJsonAsync<Promotion>($"{Endpoints.PromotionsEndpoint}", promo);
        await js.InvokeVoidAsync("alert", "Promotion Created!");
        await OnInitializedAsync();
    }

    private List<Promotion>? GetUpcomingPromotions()
    {
        if (Promotions != null)
        {
            return Promotions.Where(q => DateTime.Today < q.EndDate.Date).ToList();
        }
        else
        {
            return null;
        }
    }

    private List<Promotion>? GetPastPromotions()
    {
        if (Promotions != null)
        {
            return Promotions.Where(q => q.EndDate.Date < DateTime.Today).ToList();
        }
        else
        {
            return null;
        }
    }

    private void Edit(int id)
    {
        navigation.NavigateTo($"/promotions/edit/{id}");
    }
    private void NavigateToHome()
    {
        navigation.NavigateTo("/");
    }
    private void Capitalize(ChangeEventArgs e)
    {
        promo.Code = ((string)e.Value)?.ToUpper();
    }
    private void ToggleSelection(int id)
    {
        if (selectedIds.Contains(id))
        {
            selectedIds.Remove(id);
        }
        else
        {
            selectedIds.Add(id);
        }
    }
    private void toggleCheckBox()
    {
        showCheckboxes = !showCheckboxes;
    }
    async Task Delete()
    {
        if (selectedIds.Count == 0)
        {
            await js.InvokeVoidAsync("alert", "Please select at least one promotion to delete!");
            return;
        }
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete?");
        if (confirm)
        {
            foreach (var promoId in selectedIds)
			{
				await _client.DeleteAsync($"{Endpoints.PromotionsEndpoint}/{promoId}");
			}
			await OnInitializedAsync();
			toggleCheckBox();
        }
    }
}
