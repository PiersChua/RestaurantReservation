@page "/promotions/create"
@inject HttpClient _client
@inject NavigationManager navigation
@inject IJSRuntime js

<EditForm Model="@promo" OnValidSubmit="CreatePromotion">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-md-6 form-group">
            <label>Promotion Start Date</label>
            <div>
                <InputDate min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="promo.StartDate" class="form-control" />
                <ValidationMessage For="@(() => promo.StartDate)" />
            </div>
        </div>
        <div class="col-md-6 form-group">
            <label>Promotion End Date</label>
            <div>
                <InputDate min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="promo.StartDate" class="form-control" />
                <ValidationMessage For="@(() => promo.EndDate)" />
            </div>
        </div>
        <div class="row">
            <button type="button" @onclick="NavigateToHome" class="btn btn-outline-dark btn-block col-md-2"><span class="oi oi-arrow-left"></span> Back</button>
            <button type="submit" class="btn btn-secondary btn-block col-md-8">Create Promotion</button>
        </div>
    </div>
</EditForm>
@if (Promotions != null && GetUpcomingPromotions()?.Count > 0)
{
    <h1>Upcoming Promotions</h1>
    <div class="bd-example-snippet bd-code-snippet">
        <div class="bd-example m-0 border-0">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Start Date</th>
                        <th scope="col">End Date</th>
                        <th scope="col">Discount</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var promo in GetUpcomingPromotions())
                    {
                        <tr>
                            <td>@promo.Name</td>
                            <td>@promo.StartDate.Value.ToString("yyyy MMM dd")</td>
                            <td>@promo.EndDate.Value.ToString("yyyy MMM dd")</td>
                            <td>@promo.Discount%</td>
                            <td><button class="btn btn-secondary" @onclick="(()=>Edit(promo.Id))"><span class="bi bi-pencil-square"></span></button></td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@if (Promotions != null && GetPastPromotions()?.Count > 0)
{
    <h1>Upcoming Promotions</h1>
    <div class="bd-example-snippet bd-code-snippet">
        <div class="bd-example m-0 border-0">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Start Date</th>
                        <th scope="col">End Date</th>
                        <th scope="col">Discount</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var promo in GetPastPromotions())
                    {
                        <tr class="table table-striped">
                            <td>@promo.Name</td>
                            <td>@promo.StartDate.Value.ToString("yyyy MMM dd")</td>
                            <td>@promo.EndDate.Value.ToString("yyyy MMM dd")</td>
                            <td>@promo.Discount%</td>
                            <td><button class="btn btn-secondary" @onclick="(()=>Edit(promo.Id))"><span class="bi bi-pencil-square"></span></button></td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
@code {
    private List<Promotion>? Promotions;
    Promotion promo = new Promotion();
    protected override async Task OnInitializedAsync()
    {
        Promotions = await _client.GetFromJsonAsync<List<Promotion>>($"{Endpoints.PromotionsEndpoint}");
    }
    async Task CreatePromotion()
    {
        await _client.PostAsJsonAsync<Promotion>($"{Endpoints.PromotionsEndpoint}", promo);
        await js.InvokeVoidAsync("alert", "Promotion Created!");
    }

    private List<Promotion>? GetUpcomingPromotions()
    {
        if (Promotions != null)
        {
            return Promotions.Where(q => q.StartDate.Value >= DateTime.Today && DateTime.Today < q.EndDate.Value).ToList();
        }
        else
        {
            return null;
        }
    }

    private List<Promotion>? GetPastPromotions()
    {
        if (Promotions != null)
        {
            return Promotions.Where(q => q.StartDate.Value <= DateTime.Today).ToList();
        }
        else
        {
            return null;
        }
    }

    private void Edit(int id)
    {
        navigation.NavigateTo($"/promotions/edit/{id}");
    }
    private void NavigateToHome()
    {
        navigation.NavigateTo("/");
    }
}
