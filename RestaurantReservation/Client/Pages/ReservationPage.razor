@page "/reservation/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@attribute [Authorize]

<h3>Reservation</h3>
<table class="table table-responsive">
	<thead>
		<tr>
			<th>Name</th>
			<th>Email</th>
			<th>Cuisine</th>
			<th>Phone Number</th>
			<th>Address</th>
		</tr>
	</thead>
	<tbody>
		@if (restaurant != null)
		{
			<tr>
				<td>
					@restaurant.Name
				</td>
				<td>
					@restaurant.Email
				</td>
				<td>
					@restaurant.Cuisine
				</td>
				<td>
					@restaurant.PhoneNumber
				</td>
				<td>
					Street: @restaurant.Address?.Street<br />Building: @restaurant.Address?.Building<br />Level: @restaurant.Address?.Level<br />Unit: @restaurant.Address?.UnitNumber<br />Postal Code: @restaurant.Address?.PostalCode
				</td>

			</tr>
		}
	</tbody>
</table>

@code {
	private Restaurant? restaurant;
	private List<Restaurant>? Restaurants;
	[Parameter]
	public int id { get; set; }
	protected async override Task OnInitializedAsync()
	{
		Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
		if (Restaurants != null)
		{
			restaurant = Restaurants.First(q => q.Id == id);
		}
	}
	// protected override void OnInitialized()
	// {
	// 	// Get the current URL
	// 	var uri = new Uri(Navigation.Uri);

	// 	// Parse the query parameters
	// 	var query = uri.Query;
	// 	var queryString = System.Web.HttpUtility.ParseQueryString(query);

	// 	// Get the value of the "data" parameter
	// 	string serializedObject = queryString["data"];

	// 	// Deserialize the object if the value is not null or empty
	// 	if (!string.IsNullOrEmpty(serializedObject))
	// 	{
	// 		restaurant = System.Text.Json.JsonSerializer.Deserialize<Restaurant>(serializedObject);
	// }
	
	}
	
}
