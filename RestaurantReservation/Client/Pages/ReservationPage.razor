@page "/reservation/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@attribute [Authorize]
@if (restaurant != null && menu !=null && reshour != null)
{
	<div class="res-container">
		<div class="res-img">
			<h2>@restaurant.Name<span class="oi bi bi-bookmark-plus bookmark"></span></h2>
			<img src="@restaurant.ImagePath" />
		</div>
		<div class="menu-img">
			<a href="@menu.ImagePath" target="_blank">
				<img src="@menu.ImagePath" />
				<span class="bi bi-box-arrow-up-right"></span>
			</a>
		</div>
	</div>
	<div class="res-details-head">
		<h2>Details</h2>
		<div class="res-details">
			<div>
				<h4 class="text-decoration-underline">Address</h4>
				<p>Street: @restaurant.Address?.Street<br />Building: @restaurant.Address?.Building<br />Level @restaurant.Address?.Level<br />Unit: @restaurant.Address?.UnitNumber<br />Postal Code: @restaurant.Address?.PostalCode</p>
			</div>
			<div class="vl"></div>
			<div>
				<h4 class="text-decoration-underline">Phone Number</h4>
				<p>@restaurant.PhoneNumber</p>
			</div>
			<div class="vl"></div>
			<div>
				<h4 class="text-decoration-underline">Cuisine</h4>
				<p>@restaurant.Cuisine</p>
			</div>
			<div class="vl"></div>
			<div>
				<h4 class="text-decoration-underline">Category</h4>
				<p>@restaurant.Category</p>
			</div>
			<div class="vl"></div>
			<div>
				<h4 class="text-decoration-underline">Opening Hours</h4>
				@foreach (var hour in reshour)
				{
					<p>@hour.Day: @hour.OpeningTime?.ToString("HH:mm") - @hour.ClosingTime?.ToString("HH:mm")</p>
				}	
			</div>
		</div>
		<button class="btn btn-secondary" @onclick="NavigateToReview"><span class="bi bi-star-fill"></span> View Ratings</button>
		<button class="btn btn-secondary" @onclick="Reserve"><span class="bi bi-calendar-plus"></span> Reserve Now</button>
	</div>
}
@code {
	private Restaurant? restaurant;
	private Menu? menu;
	private List<OperatingHour>? OperatingHours;
	private List<OperatingHour>? reshour;
	private List<Restaurant>? Restaurants;
	private List<Menu>? Menus;
	[Parameter]
	public int id { get; set; }
	protected async override Task OnInitializedAsync()
	{
		Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
		Menus = await _client.GetFromJsonAsync<List<Menu>>($"{Endpoints.MenusEndpoint}");
		OperatingHours= await _client.GetFromJsonAsync<List<OperatingHour>>($"{Endpoints.OperatingHoursEndpoint}");
		if (Restaurants != null && Menus != null && OperatingHours != null) 
		{
			restaurant = Restaurants.First(q => q.Id == id);
			menu=Menus.First(q=>q.RestaurantId==id);
			reshour=OperatingHours.Where(q=>q.RestaurantId==id).ToList();
		}
	}
	private void NavigateToReview()
	{
		Navigation.NavigateTo($"/review/{id}");
	}
	private void NavigateToRealImg()
	{
		Navigation.NavigateTo($"{menu.ImagePath}");
	}
	private void Reserve()
	{
		Navigation.NavigateTo($"/reservation/create/{id}");
	}
	// protected override void OnInitialized()
	// {
	// 	// Get the current URL
	// 	var uri = new Uri(Navigation.Uri);

	// 	// Parse the query parameters
	// 	var query = uri.Query;
	// 	var queryString = System.Web.HttpUtility.ParseQueryString(query);

	// 	// Get the value of the "data" parameter
	// 	string serializedObject = queryString["data"];

	// 	// Deserialize the object if the value is not null or empty
	// 	if (!string.IsNullOrEmpty(serializedObject))
	// 	{
	// 		restaurant = System.Text.Json.JsonSerializer.Deserialize<Restaurant>(serializedObject);
	// }
	
	}
	
