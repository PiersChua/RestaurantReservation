@page "/reviews/create/{id:int}"
@inject HttpClient _client
@inject SweetAlertService Swal
@inject NavigationManager _navManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
	<div>
		<h1><b>Your Feedback is Invaluable to Us!</b></h1>
		<p>At BookBite, we are deeply committed to delivering an exceptional dining experience to each and every one of our patrons. Your satisfaction is our top priority, and we understand that your feedback plays a pivotal role in our continuous efforts to enhance our services and exceed your expectations.</p>
	</div>
	<br>
	<EditForm Model="@review" OnValidSubmit="CreateReview">
		<DataAnnotationsValidator />
		<ValidationSummary />
		<div class="form-group">
			<div class="rating">
				@foreach (var rate in RatingDetails)
				{
					<div>
						<span @onclick="() => SetRating(rate.Value)" class="bi bi-star-fill @(review.Rating >= rate.Value ? "yellow" : "")"></span>
						<label>@rate.Description</label>
					</div>
				}
				<ValidationMessage For="@(() => review.Rating)" />
			</div>
		</div>
		<br />
		<div class="form-group">
			<label>Description</label>
			<div>
				<InputTextArea @bind-Value ="review.Description" class="form-control" rows="4"/>
				<ValidationMessage For="@(() => review.Description)" />
			</div>
		</div>

		<hr class="my-4" />
		<button type="submit" class="btn btn-warning btn-block w-100">Add Review</button>

	</EditForm>
</div>
@code {
	[Parameter]
	public int id { get; set; }
	Review review = new Review();
	private string? Username;
	List<(int Value, string Description)> RatingDetails = new List<(int, string)>
	{
		(1, "Very Dissatisfied"),
		(2, "Dissatisfied"),
		(3, "Average"),
		(4, "Satisfied"),
		(5, "Very Satisfied")
	};

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		Username = authState.User.Identity.Name;
	}

	async Task CreateReview()
	{
		review.RestaurantId = id;
		review.DateTime = DateTime.Now;
		review.Username = Username;
		await _client.PostAsJsonAsync($"{Endpoints.ReviewsEndpoint}", review);
		await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Success",
                Text = "Review created",
                Icon = "success",
            });
		_navManager.NavigateTo($"/reviews/{id}");
	}
	private void SetRating(int rating)
	{
		review.Rating = rating;
	}

}
