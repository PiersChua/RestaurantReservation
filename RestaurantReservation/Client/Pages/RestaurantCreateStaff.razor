@page "/restaurant/staffCreate"
@inject HttpClient _client
@inject NavigationManager _navManager
@layout StaffLayout
@inject SweetAlertService Swal

<div class="restaurant-form" style="background-color:#f6f7f8;">

    <EditForm Model="@newrestaurant" OnValidSubmit="CreateRestaurant">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row justify-content-center">
            <h2 class="text-center text-black">Manual Restaurant Creation!</h2>
        </div>

        <div class="row justify-content-center">
            
            <div class="mb-3 col-md-3 form-group">
                <label class="text-black">Restaurant Name:</label>
                <div>
                    <InputText @bind-Value="@newrestaurant.Name" class="form-control" placeholder="Restaurant Name" />
                    <ValidationMessage For="@(() => newrestaurant.Name)" />
                </div>
            </div>
            <div class="mb-3 col-md-3 form-group">
                <label class="text-black">Email: </label>
                <div>
                    <InputText @bind-Value="@newrestaurant.Email" class="form-control" placeholder="Email" />
                    <ValidationMessage For="@(() => newrestaurant.Email)" />
                </div>
            </div>
            <div class="mb-3 col-md-3 form-group">
                <label class="text-black">Cuisine:</label>
                <div>
                    <InputText @bind-Value="@newrestaurant.Cuisine" class="form-control" placeholder="Cuisine eg.Chinese/Korea" />
                    <ValidationMessage For="@(() => newrestaurant.Cuisine)" />
                </div>
            </div>
            <div class="mb-3 col-md-3 form-group">
                <label class="text-black">Category:</label>
                <div>
                    <InputText @bind-Value="@newrestaurant.Category" class="form-control" placeholder="Category eg.Hotpot/BBQ" />
                    <ValidationMessage For="@(() => newrestaurant.Category)" />
                </div>
            </div>
            <div class="mb-3 col-md-4 form-group">
                <label class="text-black">Location:</label>
                <div>
                    <InputSelect @bind-Value="@newrestaurant.Location" class="form-control">
                        <option value="">-- Select Location --</option>
                        @foreach (var location in locationSelections)
                        {
                            <option>@location</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="mb-3 col-md-4 form-group">
                <label class="text-black">Phone Number: </label>
                <div>
                    <InputNumber @bind-Value="@newrestaurant.PhoneNumber" class="form-control" placeholder="Phone Number : XXXXXXXX" />
                    <ValidationMessage For="@(() => newrestaurant.PhoneNumber)" />
                </div>
            </div>
            <div class="mb-3 col-md-4 form-group">
                <label class="text-black">Upload Your Restaurant Image:</label>
                <div>
                    <div class="mb-3 col-md-3 form-group">
                        <InputFile OnChange="OnFileChangeForResImage" />
                    </div>
                </div>
            </div>
        </div>


        <div class="row justify-content-center">
            <h2 class="text-center text-black">Restaurant Address</h2>
        </div>
        <div class="row justify-content-center">
            <div class="mb-3 col-md-6 form-group">
                <label class="text-black">Street Name:</label>
                <div>
                    <InputText @bind-Value="@newaddress.Street" class="form-control" placeholder="Street Name: eg. 2 Tampines Central 5" />
                    <ValidationMessage For="@(() => newaddress.Street)" />
                </div>
            </div>
            <div class="mb-3 col-md-6 form-group">
                <label class="text-black">Building Name:</label>
                <div>
                    <InputText @bind-Value="@newaddress.Building" class="form-control" placeholder="Building: eg. Century Square" />
                    <ValidationMessage For="@(() => newaddress.Building)" />
                </div>
            </div>
            <div class="mb-3 col-md-6 form-group">
                <label class="text-black">Level:</label>
                <div>
                    <InputNumber @bind-Value="@newaddress.Level" class="form-control" placeholder="Level: eg. 1" />
                    <ValidationMessage For="@(() => newaddress.Level)" />
                </div>
            </div>
            <div class="mb-3 col-md-6 form-group">
                <label class="text-black">Unit Number:</label>
                <div>
                    <InputText @bind-Value="@newaddress.UnitNumber" class="form-control" placeholder="Unit Number: eg. #02-22" />
                    <ValidationMessage For="@(() => newaddress.UnitNumber)" />
                </div>
            </div>
            <div class="mb-3 col-md-6 form-group">
                <label class="text-black">Postal Code:</label>
                <div>
                    <InputNumber @bind-Value="@newaddress.PostalCode" class="form-control" placeholder="Postal Code: eg. 529509" />
                    <ValidationMessage For="@(() => newaddress.PostalCode)" />
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <h2 class="text-center text-black">Menu</h2>
        </div>
        <div class="row justify-content-center">

            <div class="mb-3 col-md-3 form-group">
                <label class="text-black">Upload Your Menu Image:</label>
                <div>
                    <InputFile OnChange="OnFileChangeForMenuImage"  />
                </div>

            </div>
        </div>

        <div class="row justify-content-center">
            <h2 class="text-center text-black">Pick a subscription!</h2>
        </div>
        <div class="row row-cols-md-3 mb-3 text-center">
            <InputRadioGroup @bind-Value="@subscribe.PlatformFee" class="form-control">
                <div class="col">
                    <div class="card mb-4 rounded-3 shadow-sm">
                        <div class="card-header py-3">
                            <h4 class="my-0 fw-normal">Normal</h4>
                        </div>
                        <div class="card-body">
                            <h1 class="card-title pricing-card-title">$10<small class="text-body-secondary fw-light">/mo</small></h1>
                            <ul class="list-unstyled mt-3 mb-4">
                                <li>Email support</li>
                                <li>Help center access</li>
                                <li>-</li>
                                <li>-</li>
                            </ul>
                            <InputRadio Value="10" />
                            <label class="text-black" for="normalPlan">Choose Plan</label>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card mb-4 rounded-3 shadow-sm">
                        <div class="card-header py-3">
                            <h4 class="my-0 fw-normal">Pro</h4>
                        </div>
                        <div class="card-body">
                            <h1 class="card-title pricing-card-title">$15<small class="text-body-secondary fw-light">/mo</small></h1>
                            <ul class="list-unstyled mt-3 mb-4">
                                <li>Customised support</li>
                                <li>Priority email support</li>
                                <li>Help center access</li>
                                <li>-</li>
                            </ul>
                            <InputRadio Value="15" />
                            <label class="text-black" for="proPlan">Choose Plan</label>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="card mb-4 rounded-3 shadow-sm">
                        <div class="card-header py-3 ">
                            <h4 class="my-0 fw-normal">Enterprise</h4>
                        </div>
                        <div class="card-body">
                            <h1 class="card-title pricing-card-title">$20<small class="text-body-secondary fw-light">/mo</small></h1>
                            <ul class="list-unstyled mt-3 mb-4">
                                <li>Dashboard</li>
                                <li>Speedy reply</li>
                                <li>Phone and email support</li>
                                <li>Help center access</li>
                            </ul>
                            <InputRadio Value="20" />
                            <label class="text-black" for="enterprisePlan">Choose Plan</label>
                        </div>
                    </div>
                </div>
            </InputRadioGroup>
            <ValidationMessage For="@(() => subscribe.PlatformFee)" />
        </div>

        <div class="row justify-content-center">
            <h2 class="text-center text-black">On days when the restaurant is closed, the opening and closing times should be identical.</h2>
        </div>

        <div class="row justify-content-center">
            <div class="row mb-3">
                <div class="col-md-6 form-group">
                    <label class="text-black">Monday Opening Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@monday.OpeningTime" class="form-control" />
                </div>
                <div class="col-md-6 form-group">
                    <label class="text-black">Monday Closing Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@monday.ClosingTime" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 form-group">
                    <label class="text-black">Tuesday Opening Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@tuesday.OpeningTime" class="form-control" />
                </div>
                <div class="col-md-6 form-group">
                    <label class="text-black">Tuesday Closing Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@tuesday.ClosingTime" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 form-group">
                    <label class="text-black">Wednesday Opening Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@wednesday.OpeningTime" class="form-control" />
                </div>
                <div class="col-md-6 form-group">
                    <label class="text-black">Wednesday Closing Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@wednesday.ClosingTime" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 form-group">
                    <label class="text-black">Thursday Opening Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@thursday.OpeningTime" class="form-control" />
                </div>
                <div class="col-md-6 form-group">
                    <label class="text-black">Thursday Closing Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@thursday.ClosingTime" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 form-group">
                    <label class="text-black">Friday Opening Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@friday.OpeningTime" class="form-control" />
                </div>
                <div class="col-md-6 form-group">
                    <label class="text-black">Friday Closing Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@friday.ClosingTime" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 form-group">
                    <label class="text-black">Saturday Opening Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@saturday.OpeningTime" class="form-control" />
                </div>
                <div class="col-md-6 form-group">
                    <label class="text-black">Saturday Closing Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@saturday.ClosingTime" class="form-control" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6 form-group">
                    <label class="text-black">Sunday Opening Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@sunday.OpeningTime" class="form-control" />
                </div>
                <div class="col-md-6 form-group">
                    <label class="text-black">Sunday Closing Time:</label>
                    <InputDate Type="InputDateType.Time" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="@sunday.ClosingTime" class="form-control" />
                </div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-md-auto py-2">
                <button style="width:712.5px" type="submit" class="btn btn-primary btn-block">Submit Application</button>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-auto py-2">
                <a style="width:712.5px" class="btn btn-secondary btn-block" href="/restaurantStaff">Back</a>
            </div>
        </div>

    </EditForm>


</div>

@code {

    Restaurant newrestaurant = new Restaurant();

    Address newaddress = new Address(); //created
    Menu newMenu = new Menu(); //created

    Subscription subscribe = new Subscription(); 

    OperatingHour monday = new OperatingHour();
    OperatingHour tuesday = new OperatingHour();
    OperatingHour wednesday = new OperatingHour();
    OperatingHour thursday = new OperatingHour();
    OperatingHour friday = new OperatingHour();
    OperatingHour saturday = new OperatingHour();
    OperatingHour sunday = new OperatingHour();

    private List<Address>? address;
    private List<Menu>? menu;
    private List<Subscription>? subscription;
    private List<OperatingHour>? operatinghour;
    private List<Restaurant>? restaurantlist;

    private int createdRestaurantID;

    List<int> SubscribtionList = new List<int> { 10, 15, 20 };
    List<string> locationSelections = new List<string> { "North", "South", "East", "West", "NorthEast", "NorthWest", "SouthEast", "SouthWest", "Central" };

    protected async override Task OnInitializedAsync()
    {
        restaurantlist = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
        address = await _client.GetFromJsonAsync<List<Address>>($"{Endpoints.AddressesEndpoint}");
        menu = await _client.GetFromJsonAsync<List<Menu>>($"{Endpoints.MenusEndpoint}");
        subscription = await _client.GetFromJsonAsync<List<Subscription>>($"{Endpoints.SubscriptionsEndpoint}");
        operatinghour = await _client.GetFromJsonAsync<List<OperatingHour>>($"{Endpoints.OperatingHoursEndpoint}");

        createdRestaurantID = restaurantlist.LastOrDefault().Id + 1;

        newMenu.ImagePath = "";
        newrestaurant.ImagePath = "";
    }

    private async Task CreateRestaurant()
    {

        HttpResponseMessage responseAddress = await _client.PostAsJsonAsync($"{Endpoints.AddressesEndpoint}", newaddress);

        if (responseAddress.IsSuccessStatusCode)
        {
            // Read the Address object from the response body
            Address createdAddress = await responseAddress.Content.ReadFromJsonAsync<Address>();

            // Use the address object, which should include the ID after the insert
            newrestaurant.AddressId = createdAddress.Id;

        }

        HttpResponseMessage responseSubscription = await _client.PostAsJsonAsync($"{Endpoints.SubscriptionsEndpoint}", subscribe);

        if (responseSubscription.IsSuccessStatusCode)
        {
            Subscription createdSubscription = await responseSubscription.Content.ReadFromJsonAsync<Subscription>();
            newrestaurant.SubscriptionId = createdSubscription.Id;

        }

        if (newrestaurant.ImagePath == "")
        {
            newrestaurant.ImagePath = "images/noImage.jpg";
        }
        
        newrestaurant.Status = "Active";

        HttpResponseMessage responseRestaurant = await _client.PostAsJsonAsync($"{Endpoints.RestaurantsEndpoint}", newrestaurant);

        if (responseRestaurant.IsSuccessStatusCode)
        {
            Restaurant createdRestaurant = await responseRestaurant.Content.ReadFromJsonAsync<Restaurant>();
            createdRestaurantID = createdRestaurant.Id;

        }

        monday.Day = "Monday";
        tuesday.Day = "Tuesday";
        wednesday.Day = "Wednesday";
        thursday.Day = "Thursday";
        friday.Day = "Friday";
        saturday.Day = "Saturday";
        sunday.Day = "Sunday";

        monday.RestaurantId = createdRestaurantID;
        tuesday.RestaurantId = createdRestaurantID;
        wednesday.RestaurantId = createdRestaurantID;
        thursday.RestaurantId = createdRestaurantID;
        friday.RestaurantId = createdRestaurantID;
        saturday.RestaurantId = createdRestaurantID;
        sunday.RestaurantId = createdRestaurantID;

        newMenu.RestaurantId = createdRestaurantID;

        if (newMenu.ImagePath == "")
        {
            newMenu.ImagePath = "images/noImage.jpg";
        }

        await _client.PostAsJsonAsync($"{Endpoints.MenusEndpoint}", newMenu);

        await _client.PostAsJsonAsync($"{Endpoints.OperatingHoursEndpoint}", monday);
        await _client.PostAsJsonAsync($"{Endpoints.OperatingHoursEndpoint}", tuesday);
        await _client.PostAsJsonAsync($"{Endpoints.OperatingHoursEndpoint}", wednesday);
        await _client.PostAsJsonAsync($"{Endpoints.OperatingHoursEndpoint}", thursday);
        await _client.PostAsJsonAsync($"{Endpoints.OperatingHoursEndpoint}", friday);
        await _client.PostAsJsonAsync($"{Endpoints.OperatingHoursEndpoint}", saturday);
        await _client.PostAsJsonAsync($"{Endpoints.OperatingHoursEndpoint}", sunday);

        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Success",
                Text = "Restaurant Created!",
                Icon = "success",
            });

        _navManager.NavigateTo("/restaurantapplication");
    }

    private async Task OnFileChangeForResImage(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        newrestaurant.ImagePath = imageData;

    }

    private async Task OnFileChangeForMenuImage(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        newMenu.ImagePath = imageData;

    }
}


