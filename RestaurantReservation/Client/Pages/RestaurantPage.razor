@page "/restaurant/{id:int}"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@if (restaurant != null && menu != null && reshour != null)
{
	<div class="res-container pb-5">
		<div class="res-img">
			<h2>@restaurant.Name <span data-bs-toggle="tooltip" title="@(IsFavourite ? "Remove from favourites" : "Add to favourites")" @onclick="ChangeFavourite" class="oi bi bi-bookmark-star-fill @(IsFavourite ? "bookmark-yellow" : "bookmark")"></span></h2>
			<img src="@restaurant.ImagePath" />
		</div>
		<div class="menu-img">
			@if(menu.ImagePath!=null)
			{
				<a data-bs-toggle="tooltip" title="Open Image" href="@menu.ImagePath" target="_blank">
					<img src="@menu.ImagePath" />
					<span class="bi bi-box-arrow-up-right"></span>
				</a>
			}
			else
			{
				<a data-bs-toggle="tooltip" title="Open Image" href="/404" target="_blank">
					<img src="https://static.vecteezy.com/system/resources/previews/005/337/799/original/icon-image-not-found-free-vector.jpg" />
					<span class="bi bi-box-arrow-up-right"></span>
				</a>
			}
		</div>
			<div class="shadow-sm">
				<h1></h1>
				<div class="card-body">
					<button class="w-100 btn btn-warning btn-lg" @onclick="NavigateToReview"><span class="bi bi-star-fill"></span> View Ratings</button>
					<button class=" w-100 btn btn-warning btn-lg" @onclick="Reserve"><span class="bi bi-calendar-plus"></span> Reserve Now</button>
				</div>
			</div>
	</div>
	<div class="accordion" id="accordionExample">
		<div class="accordion-item">
			<h2 class="accordion-header" id="headingOne">
				<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
					Restaurant Details
				</button>
			</h2>
			<div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
				<div class="accordion-body">
					<div class="res-details">
						<div>
							<h4 class="text-decoration-underline">Address</h4>
							<p>Street: @restaurant.Address?.Street<br />Building: @restaurant.Address?.Building<br />Level @restaurant.Address?.Level<br />Unit: @restaurant.Address?.UnitNumber<br />Postal Code: @restaurant.Address?.PostalCode</p>
						</div>
						<div class="vl"></div>
						<div>
							<h4 class="text-decoration-underline">Phone Number</h4>
							<p>@restaurant.PhoneNumber</p>
						</div>
						<div class="vl"></div>
						<div>
							<h4 class="text-decoration-underline">Email</h4>
							<p>@restaurant.Email</p>
						</div>
						<div class="vl"></div>
						<div>
							<h4 class="text-decoration-underline">Cuisine</h4>
							<p>@restaurant.Cuisine</p>
						</div>
						<div class="vl"></div>
						<div>
							<h4 class="text-decoration-underline">Category</h4>
							<p>@restaurant.Category</p>
						</div>
						<div class="vl"></div>
						<div>
							<h4 class="text-decoration-underline">Opening Hours</h4>
							@foreach (var hour in reshour)
							{
								<p>@hour.Day: @hour.OpeningTime?.ToString("HH:mm") - @hour.ClosingTime?.ToString("HH:mm")</p>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}
@code {
	private Restaurant? restaurant;
	private Menu? menu;
	private List<OperatingHour>? OperatingHours;
	private List<OperatingHour>? reshour;
	private List<Restaurant>? Restaurants;
	private List<Menu>? Menus;
	private List<Favourite>? Favourites;
	private Favourite favourite; // user's favourites in this restaurant
	private string empty="NA";
	private string? Username;
	private bool IsFavourite { get; set; }


	[Parameter]
	public int id { get; set; }
	protected async override Task OnInitializedAsync()
	{
		Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
		Menus = await _client.GetFromJsonAsync<List<Menu>>($"{Endpoints.MenusEndpoint}");
		OperatingHours= await _client.GetFromJsonAsync<List<OperatingHour>>($"{Endpoints.OperatingHoursEndpoint}");
		Favourites = await _client.GetFromJsonAsync<List<Favourite>>($"{Endpoints.FavouritesEndpoint}");
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		Username = authState.User.Identity.Name;
		favourite = Favourites.FirstOrDefault(q => q.RestaurantId == id && q.Username == Username);
		IsFavourite = Favourites.Contains(favourite);
		if (Restaurants != null && Menus != null && OperatingHours != null) 
		{
			restaurant = Restaurants.First(q => q.Id == id);
			if(string.IsNullOrEmpty(restaurant.Address.UnitNumber))//checks if unit number is empty, other attributes are not checked as they are usually provided
			{
				restaurant.Address.UnitNumber=empty;
			}
			menu=Menus.First(q=>q.RestaurantId==id);
			reshour=OperatingHours.Where(q=>q.RestaurantId==id).ToList();
		}
	}
	private void NavigateToReview()
	{
		Navigation.NavigateTo($"/reviews/{id}");
	}
	private void NavigateToRealImg()
	{
		Navigation.NavigateTo($"{menu.ImagePath}");
	}
	private void Reserve()
	{
		Navigation.NavigateTo($"/reservation/create/{id}");
	}
	async Task ChangeFavourite()
	{
		if (IsFavourite)
		{
			await _client.DeleteAsync($"{Endpoints.FavouritesEndpoint}/{favourite.Id}");
			await js.InvokeVoidAsync("alert", $"{restaurant?.Name} removed from favourites");
		}
		else
		{
			Favourite fav = new Favourite();
			fav.Username = Username;
			fav.RestaurantId =  id;
			await _client.PostAsJsonAsync($"{Endpoints.FavouritesEndpoint}", fav);
			await js.InvokeVoidAsync("alert", $"{restaurant?.Name} added to Favourites");
		}
		await OnInitializedAsync();
	}
}
	
