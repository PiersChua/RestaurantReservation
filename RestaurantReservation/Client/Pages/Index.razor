@page "/"
@inject HttpClient _client
@inject NavigationManager Navigation
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]


<div class="hero">
	<img src="images/hero.jpg">
	<div class="overlay-text">
		<h4 data-text="Experience culinary excellence with us">Experience culinary excellence with us</h4>
		<h2 data-text="anywhere,everywhere">anywhere,everywhere</h2>
	</div>
</div>
@if (Restaurants != null)
{
	<h2 class="menu-title"><span class="oi oi-people grey-color"></span> Everyday Hotpot</h2>
	<div class="wrapper">
		@foreach (var restaurant in Restaurants)
		{
			if (restaurant.Category == "Hotpot" && restaurant.Status == "Active")
			{
				<div class="item">
					<a href="/restaurant/@restaurant.Id"><img src="@restaurant.ImagePath" /></a>	
					<div class="overlay-name">
						<p>@restaurant.Name</p>
					</div>
					@* <a @onclick="(()=>Reserve(restaurant))">@restaurant.Name</a> *@
				</div>
			}
		}

	</div>

	<h2 class="menu-title"><span class="oi bi bi-fire red-color"></span> Gen Z's Favourite KBBQ</h2>
	<div class="wrapper">
		@foreach (var restaurant in Restaurants)
		{
			if (restaurant.Category == "BBQ" && restaurant.Status == "Active")
			{
				<div class="item">
					<a href="/restaurant/@restaurant.Id"><img src="@restaurant.ImagePath" /></a>
					<div class="overlay-name">
						<p>@restaurant.Name</p>
					</div>
					@* <a @onclick="(()=>Reserve(restaurant))">@restaurant.Name</a> *@
				</div>
			}
		}
	</div>

	<h2 class="menu-title"><span class="oi bi bi-shop"></span> Randomised Restaurants</h2>
	<div class="wrapper">
		@foreach (var restaurant in RandomisedRestaurants)
		{
			if (restaurant.Status == "Active")
			{
				<div class="item">
					<a href="/restaurant/@restaurant.Id"><img src="@restaurant.ImagePath" /></a>	
					<div class="overlay-name">
						<p>@restaurant.Name</p>
					</div>
				</div>				
			}
		}

	</div>

	<MainFooter></MainFooter>
}
else
{
	<h1>Loading Restaurants.</h1>
}


@code{

	private List<Restaurant>? Restaurants;
	private List<Restaurant>? RandomisedRestaurants;
	private Random rng = new Random();

	protected override async Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");

		RandomisedRestaurants = Restaurants.OrderBy(a => rng.Next()).ToList();

	}
	public void Dispose()
	{
		_interceptor.DisposeEvent();
	}

} 

