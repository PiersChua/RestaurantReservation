@page "/restaurantStaff/"
@inject HttpClient _client
@inject IJSRuntime js
@inject NavigationManager Navigation
@implements IDisposable
@layout StaffLayout
@attribute [Authorize]
@inject SweetAlertService Swal

<h2 class="text-center text-black">Restaurants</h2>
<div class="d-flex justify-content-center align-items-center">
    <a href="/restaurant/staffCreate" class="bi bi-plus-square-fill btn btn-success"> Create Restaurant</a>
</div>


@if (restaurants != null)
{
    <table class="table table-responsive table-striped" id="bookingsTable">
        <thead>
            <tr>
                <th>Restaurant Name</th>
                <th>Cuisine</th>
                <th>Status</th>
                <th>Actions</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var R in restaurants)
            {
                <tr>
                    <td>@R.Name</td>
                    <td>@R.Cuisine</td>
                    <td>@R.Status</td>
                    <td>
                        @if (R.Status == "Deleted")
                        {
                            <button class="bi bi-arrow-counterclockwise btn btn-dark" @onclick="@(()=>UndoDelete(@R.Id))"></button>
                            <button class="bi bi-trash btn btn-danger" @onclick="@(()=>ActualDelete(@R.Id))"></button>
                        }
                        else
                        {
                            <a href="/restaurant/view/@R.Id" style="margin-right: 6px;" class="bi bi-view-list btn btn-primary"></a>

                            <a href="/restaurant/edit/@R.Id" style="margin-right: 6px;" class="bi bi-pencil btn btn-warning"></a>

                            <button class="bi bi-trash btn btn-danger" @onclick="@(()=>Delete(@R.Id))"></button>
                        }

                    </td>
                    
                </tr>
            }
        </tbody>
    </table>

}
else
{
    <div class="alert alert-info">Loading...</div>
}

@code {
    private List<Restaurant>? restaurants;

    protected async override Task OnInitializedAsync()
    {
        restaurants = await _client.GetFromJsonAsync<List<Restaurant>>($"{Endpoints.RestaurantsEndpoint}");
    }

    private async Task UndoDelete(int restaurantId)
    {
        var deletedRestaurant = restaurants.First(q => q.Id == restaurantId);

        await Swal.FireAsync(
            "Deleted",
            "The Restaurant is Back!",
            SweetAlertIcon.Success
        );

        deletedRestaurant.Status = "Active";
        await _client.PutAsJsonAsync($"{Endpoints.RestaurantsEndpoint}/{restaurantId}", deletedRestaurant);
    }

    
    private async Task Delete(int restaurantId)
    {
        var deletedRestaurant = restaurants.First(q => q.Id == restaurantId);
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You will not be able to recover this Restaurant!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "No, keep it"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Swal.FireAsync(
              "Deleted",
              "This Restaurant has been deleted.",
              SweetAlertIcon.Success
              );

            deletedRestaurant.Status = "Deleted";
            await _client.PutAsJsonAsync($"{Endpoints.RestaurantsEndpoint}/{restaurantId}", deletedRestaurant);

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
              "Cancelled",
              "Your Restaurant is safe :)",
              SweetAlertIcon.Error
              );
        }
    }

    private async Task ActualDelete(int restaurantId)
    {
        var deletedRestaurant = restaurants.First(q => q.Id == restaurantId);
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You will not be able to recover this Restaurant!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "No, keep it"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await Swal.FireAsync(
              "Deleted",
              "This Restaurant has been deleted.",
              SweetAlertIcon.Success
              );

            deletedRestaurant.Status = "Deleted";
            await _client.DeleteAsync($"{Endpoints.RestaurantsEndpoint}/{restaurantId}");

        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
              "Cancelled",
              "Your Restaurant is safe :)",
              SweetAlertIcon.Error
              );
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
    }
}

